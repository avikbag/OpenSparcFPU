Initializing gui preferences from file  /home/DREXEL/ab3433/.synopsys_icc_prefs.tcl
icc_shell> man clock_opt
2.  Synopsys Commands                                        Command Reference
                                   clock_opt

NAME
       clock_opt
              Performs  clock  tree  synthesis, routing of clock nets, extrac-
              tion, optimization,  and  hold  time  violation  fixing  on  the
              design.   There  is  also  an option to perform interclock delay
              balancing.

SYNTAX
       status clock_opt
               [-only_psyn]
               [-fix_hold_all_clocks]
               [-inter_clock_balance]
               [-update_clock_latency]
               [-operating_condition   min | max | min_max]
               [-only_cts]
               [-clock_trees name_of_clocks]
               [-optimize_dft]
               [-continue_on_missing_scandef]
               [-no_clock_route]
               [-only_hold_time]
               [-area_recovery]
               [-size_only | -in_place_size_only]
               [-power]
               [-insert_self_gating]
               [-congestion]
               [-concurrent_clock_and_data]
               [-incremental_concurrent_clock_and_data]

ARGUMENTS
       -only_psyn
              Performs optimization only.

       -fix_hold_all_clocks
              Performs hold time violation fixing for all clocks during incre-
              mental optimization.

              By  default, the clock_opt command does not perform hold fixing.

       -inter_clock_balance
              Performs interclock delay balancing.

              By default, the clock_opt command does  not  perform  interclock
              delay balancing.

       -update_clock_latency
              Updates  the  latencies  on real and virtual clock objects after
              clock tree synthesis, clock tree optimization, interclock  delay
              balancing (if enabled), and clock tree detail routing.

              This  option  effectively executes the set_clock_latency command
              internally for the clock objects and uses the insertion delay of
              the   clock   tree   as  the  latency  value.  If  you  run  the
              set_latency_adjustment_options command before the clock_opt com-
              mand,  the  directives  are  obeyed.  If  you do not specify any
              directives,  only  the  latencies  of  real  clock  objects  are
              updated.   The  update mechanism uses the insertion delay of the
              clock tree as the latency value.

       -operating_condition  min | max | min_max
              Specifies the operating condition. The default is max.

       -only_cts
              Performs only clock tree synthesis, clock tree optimization, and
              clock tree routing.

       -clock_trees name_of_clocks
              Performs  clock  tree  synthesis  and optimization on the clocks
              specified in the order specified.

       -optimize_dft
              Enables clock-aware scan reordering.

              The reordering tries to minimize the number of buffer  crossings
              in  the  scan  chains. Minimizing the number of buffer crossings
              can reduce hold time violations in the scan chains.

              When you specify this option, you must  load  the  SCANDEF  data
              that  defines  the scan chains before running the clock_opt com-
              mand.  You can use the get_scan_chains command to check  if  the
              SCANDEF data is available.

              For  best results, first use the place_opt -optimize_dft command
              to perform placement-aware scan reordering.

              By default, the clock_opt command does not perform scan reorder-
              ing.

       -continue_on_missing_scandef
              Continues  placement when the design contains scan chains but no
              SCANDEF data.

              By default, missing SCANDEF data causes the command to exit with
              an  error  message. If you specify this option, the command con-
              tinues with a warning and results in reduced quality-of-results.

       -no_clock_route
              Disables routing of clock nets.

       -only_hold_time
              Performs only hold time fixing after clock tree synthesis.

              If  you  specify the -fix_hold_all_clocks option, the tool fixes
              hold time violations for all clocks.  Otherwise, the tool  fixes
              hold  time  violations  only  for  the clocks specified with the
              set_fix_hold command.

       -area_recovery
              Enables area recovery for the cells not on the  timing  critical
              paths.

       -size_only
              Restricts  post  clock  tree  synthesis  optimization  to sizing
              changes only.  Optimization procedures that insert new cells and
              remove cells are disabled.

              See  the  description  for  the  -in_place_size_only  option for
              information about how to further constrain sizing changes.

              The -size_only  and  -in_place_size_only  options  are  mutually
              exclusive.

       -in_place_size_only
              Restricts  post  clock  tree  synthesis optimization to in-place
              sizing changes only.  Optimization procedures  that  insert  new
              cells and remove cells are disabled.

              With  the -in_place_size_only option, sizing changes are further
              constrained for minimal engineering change order (ECO) placement
              changes.   For  example,  a  cell  is sized to improve timing or
              design rule costs only if the newly-sized cell can fit into  any
              available  space  adjacent  to  the original cell location.  The
              resulting transformation is verified to ensure that it is legal.

              The  -size_only  and  -in_place_size_only  options  are mutually
              exclusive.

       -power
              Performs the enabled clock tree power optimizations before clock
              tree  synthesis,  as well as power-aware timing optimization and
              leakage-power optimization after clock tree synthesis.

              The supported clock tree  power  optimizations  are  power-aware
              placement  and  clock  gate restructuring. To enable power-aware
              placement, use the set_optimize_pre_cts_power_options command to
              set  the  -low_power_placement  option  to true. When you enable
              power-aware placement, the tool performs incremental  switching-
              activity-based  power-aware placement. For the best results from
              power-aware placement, you should specify the same coarse place-
              ment  setup, such as the placer_max_cell_density_threshold vari-
              able, used in the place_opt command before running the clock_opt
              command.

              To   enable   clock   gate   restructuring,  use  the  set_opti-
              mize_pre_cts_power_options command to set the -merge_clock_gates
              option to true.

              The  clock_opt  command  can  perform leakage-power optimization
              based on either the multiple-threshold-voltage constraint or the
              leakage  values  of  the library cells. To perform leakage-power
              optimization based on the multiple-threshold-voltage constraint,
              use  the  set_multi_vth_constraint  command  to define this con-
              straint before running the  clock_opt  command.   If  this  con-
              straint  is  not defined, the tool bases the leakage-power opti-
              mization on the leakage values of the library cells.

              When you specify this option for a multicorner-multimode design,
              you  must  use  the  set_scenario_options  command to select the
              leakage scenarios before running the clock_opt command.

              When you use the -power option with the  -only_cts  option,  the
              enabled  clock  tree  power  optimizations  are performed before
              clock tree synthesis; leakage-power  optimization  is  not  per-
              formed.

              When  you  use  the  -power  option  with the -only_psyn option,
              power-aware timing optimization and  leakage-power  optimization
              are  performed  but  the  clock tree power optimizations are not
              performed.

              To perform only power-aware-timing optimization and  not  clock-
              tree-power  or leakage-power optimization, do not use the -power
              option. Instead, set  the  icc_preroute_power_aware_optimization
              variable to true before running the clock_opt command.

       -insert_self_gating
              Inserts XOR self-gating logic during clock tree synthesis before
              clock tree construction.

              For best results, you should provide the clock activity informa-
              tion  by  reading  a SAIF file with the read_saif command before
              running the clock_opt command.

       -congestion
              Performs congestion-driven incremental placement during the post
              clock tree synthesis optimization stage.

              By  default,  the clock_opt command does not consider congestion
              during incremental placement.

       -concurrent_clock_and_data
              When   -only_cts   option   is   used   along   with    -concur-
              rent_clock_and_data  option,  the  tool  synthesizes  the  clock
              trees, performs data-path optimization, and computes useful skew
              for  improving  the  setup  WNS  and TNS, and rebuilds the clock
              trees   to   implement   the   useful   skew.   When    -concur-
              rent_clock_and_data   is   used   along  with  only_cts  option,
              clock_opt command accepts other data-path  optimization  options
              such  as  area_recovery,  congestion, etc to guide the data-path
              optimization that is performed inside.

              When   -only_psyn   option   is   used   along   with   -concur-
              rent_clock_and_data  option,  the  tool performs data-path opti-
              mization, WNS improvement driven clock  tree  optimization,  and
              finally performs an additional data-path optimization.

              When  -concurrent_clock_and_datai  is  used  without only_cts or
              only_psyn, it is  equivalent  to  clock_opt  -only_cts  -concur-
              rent_clock_and_data  followed by  clock_opt  -only_psyn -concur-
              rent_clock_and_data.

       -incremental_concurrent_clock_and_data
              Performs incremental data-path optimization and timing  improve-
              ment  driven  clock  tree optimization. The optimization at this
              stage  improves  timing  in  all   active   scenarios.   Options
              -area_recovery and -continue_on_missing_scandef can be used with
              -incremental_concurrent_clock_and_data.

              When this option is given, no clock detail route is called  even
              there is no -no_clock_route given.

              It  is recommended to use -incremental_concurrent_clock_and_data
              only after clock_opt  -only_cts  -concurrent_clock_and_data  and
              clock_opt  -only_psyn  -concurrent_clock_and_data  have  already
              been run.

DESCRIPTION
       The clock_opt command performs clock tree synthesis, routing  of  clock
       nets, extraction, optimization, and optionally hold time violation fix-
       ing on the current design.

       If clock tree synthesis or the routing of the  clock  nets  fails,  the
       command returns with a value of 0.

       If you specify the -only_psyn option, the tool performs only extraction
       and optimization on a clock-routed design.  This option can be used  in
       a  customized  clock  tree synthesis flow where clock tree synthesis is
       performed outside of the clock_opt command.

       Before running the clock_opt command,  use  the  set_clock_tree_options
       command   to   control   the   compile_clock_tree   command.   Use  the
       set_latency_adjustment_options command to issue directives  to  control
       the  adjustment  of latency on clock objects that belong to virtual and
       real clocks. If no directives are given, the default clock_opt  command
       flow  updates  the latencies of real clocks with their insertion delays
       obtained after the compile_clock_tree, optimize_clock_tree, and option-
       ally       balance_inter_clock_delay       commands.       Use      the
       set_inter_clock_delay_options command to control the behavior of inter-
       clock delay balancing within the clock_opt command.

       Briefly, the clock_opt command
         o Runs the optimize_pre_cts_power command, if enabled
         o Runs the compile_clock_tree command
         o Runs the optimize_clock_tree command
         o  Runs the set_propagated_clock command for all clocks from the root
         pin, but keeps the clock object as ideal
         o Performs interclock delay balancing, if enabled
         o Performs detail routing of the clock nets
         o Performs RC extraction of the  clock  nets  and  computes  accurate
         clock arrival times
         o Updates the latency on clock objects, if enabled
         o Reduces congestion, if enabled
         o Optimizes the scan chains, if enabled
         o Fixes the placement of the clock tree buffers and inverters
         o Runs the psynopt command
         o Fixes hold time violations, if enabled

   Multicorner-Multimode Support
       This  command uses information from the clock tree synthesis scenarios.
       All scenarios enabled as clock tree synthesis scenarios  are  activated
       for  clock  tree  synthesis  and  are  returned  to their current state
       (active or inactive) after clock tree synthesis.  If you  enable  power
       optimization,  you must select the leakage scenarios before running the
       clock_opt command.

EXAMPLES
       The following command performs clock tree  synthesis,  routing  of  all
       clock nets, extraction, and optimization:

         prompt> clock_opt

SEE ALSO
       extract_rc(2)
       psynopt(2)
       place_opt(2)
       read_saif(2)
       route_opt(2)
       set_clock_tree_options(2)
       set_inter_clock_delay_options(2)
       set_latency_adjustment_options(2)
       set_multi_vth_constraint(2)
       set_scenario_options(2)
       icc_preroute_power_aware_optimization(3)
       skew_opt(2)
       set_concurrent_clock_and_data_strategy(2)
       reset_concurrent_clock_and_data_strategy(2)
       report_concurrent_clock_and_data_strategy(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> man route_zrt_group
2.  Synopsys Commands                                        Command Reference
                                route_zrt_group

NAME
       route_zrt_group
              Performs  routing on a group of nets in the design using Zroute.
              You should use this command before signal routing to route crit-
              ical nets such as clock nets or timing-critical nets. Do not use
              this command to connect  nets  after  signal  routing  (use  the
              route_zrt_eco command instead).

SYNTAX
       status route_zrt_group
               [-max_detail_route_iterations num]
               [-nets nets | -all_clock_nets]
               [-stop_after_global_route true | false]
               [-reuse_existing_global_route true | false]
               [-utilize_dangling_wires true | false]
               [-exploration true | false]
               [-route_nondefault_nets_first true | false]
               -from_file file_name

   Data Types
       num          integer
       nets         collection

ARGUMENTS
       -max_detail_route_iterations num
              Specifies  the maximum number of detail routing iterations.  You
              can specify an integer between 1 and 1000.

              By default, the maximum number  of  iterations  for  the  detail
              routing command (40) is used.

       -nets nets
              Specifies the nets to be routed.

              You must specify the nets on which to run this command by speci-
              fying  at  least  one   of   the   following   options:   -nets,
              -all_clock_nets,  and  -from_file. The -nets and -all_clock_nets
              options are mutually exclusive; you can specify  only  one.  You
              can  specify  the  -from_file  option  in  addition to the -nets
              option.

       -all_clock_nets
              Routes all clock nets.

              You must specify the nets on which to run this command by speci-
              fying   at   least   one   of   the  following  options:  -nets,
              -all_clock_nets,   and   -from_file.   If   you   specify    the
              -all_clock_nets   option,   you  cannot  specify  the  -nets  or
              -from_file option.

       -stop_after_global_route true | false
              Controls whether the router stops after global routing  or  con-
              tinues all the way to detail routing.

              The  default value is false, which means that the router contin-
              ues all the way to detail routing.

       -reuse_existing_global_route true | false
              Enables (true) or disables (false) incremental global routing.

              By default (false),  the  global  router  ignores  all  existing
              global routes from the design for initial routing.

              If  you set this option to true, the global router considers and
              reuses the existing global routes.

       -utilize_dangling_wires true | false
              Controls whether the router tries to reuse the  dangling  routes
              as much as possible.

              The default value is true.

       -exploration true | false
              Specifies  what routing quality the router should use for global
              routing.

              By default (false), the router routes the design in normal  mode
              and uses higher effort to reduce congestion.

              If  you  set  this option to true, the global router ignores the
              blockages on blocked pins when  routing  the  design  and  makes
              other  simplifying assumptions in order to complete global rout-
              ing quickly. Designs can be  unlegalized  in  exploration  mode.
              Exploration  mode  will also disable timing or cross talk driven
              routing.  The resulting congestion map  shows  the  location  of
              congestion  hot  spots  in  the  floorplan.  Absolute congestion
              statistics might differ from the  normal  global  router,  espe-
              cially if the design is not clean.  Exploration mode is intended
              to be used only in floorplan exploration or design planning. Its
              purpose is to give a quick picture of floorplan routing problems
              as a guide for placement improvements. You should not run  track
              assignment  or  detail  routing based on exploration mode global
              routing. If you do not  also  set  the  -stop_after_global_route
              true  option  when  you enable exploration mode, the router sets
              this option automatically and issues an  error  indicating  that
              exploration  mode  global  routing should not be used for detail
              routing.

       -route_nondefault_nets_first true | false
              Specifies whether to route  the  nets  with  nondefault  routing
              rules before the nets that use the default routing rule.

              When false (the default), nets with nondefault routing rules are
              not routed before the nets without nondefault routing rules.

              When true, the tool performs global routing and track assignment
              first  on  nets  with nondefault routing rules, and then on nets
              that use the default routing rule.

       -from_file file_name
              Routes the nets specified by name in the file.

              If the specified file either does not exist or does not  contain
              any  valid  nets,  the tool generates an error and indicates the
              source of the problem.

              You must specify the nets on which to run this command by speci-
              fying   at   least   one   of   the  following  options:  -nets,
              -all_clock_nets, and -from_file. You can specify the  -from_file
              option  in addition to the -nets; however, the -from_file option
              cannot be used with the -all_clock_nets option.

DESCRIPTION
       The route_zrt_group command routes  a  specified  group  of  nets.  You
       should  use  this  command before signal routing to route critical nets
       such as clock nets or timing-critical nets. After  signal  routing,  do
       not  use  this  command  to connect nets; use the route_zrt_eco command
       instead.

   Multicorner-Multimode Support
       This command uses information from all active scenarios.

EXAMPLES
       The following command performs routing for all  clock  nets  using  the
       -max_detail_route_iterations and -utilize_dangling_wires options.

         prompt> route_zrt_group -all_clock_nets \
            -max_detail_route_iterations 6 \
            -utilize_dangling_wires true

SEE ALSO
       route_zrt_global(2)
       route_zrt_track(2)
       route_zrt_detail(2)
       route_zrt_eco(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> man route_opt
2.  Synopsys Commands                                        Command Reference
                                   route_opt

NAME
       route_opt
              Performs  simultaneous routing and postroute optimization on the
              design.

SYNTAX
       status route_opt
               [-stage global | track | detail]
               [-xtalk_reduction]
               [-only_xtalk_reduction]
               [-power]
               [-size_only]
               [-area_recovery]
               [-wire_size]
               [-effort low | medium | high]
               [-initial_route_only
                | -skip_initial_route
                | -incremental]
               [-only_wire_size]
               [-only_hold_time]
               [-only_design_rule]
               [-only_power_recovery]
               [-only_area_recovery]
               [-register_to_register]
               [-concurrent_clock_and_data]
               [-only_concurrent_clock_and_data]
               [-optimize_wire_via]
               [-num_cpus count]

   Data Types
       count     integer

ARGUMENTS
       -stage global | track | detail
              Specifies the routing stages to  run  before  running  topology-
              based optimization.

              If you do not specify this option, the tool runs global routing,
              track assignment, and detail routing  before  running  optimiza-
              tion.

              If  you specify -stage global, the tool runs only global routing
              before running optimization.

              If you specify -stage track, the tool runs  global  routing  and
              track assignment before running optimization.

              IF  you specify -stage detail, the tool runs only detail routing
              before running optimization. The  design  must  already  contain
              global route and track assignment information.

              If  you  specify -stage global or -stage track when block inter-
              face optimization is enabled, the tool issues a warning  message
              and ignores block interface optimization. To use block interface
              optimization,  either  remove  this  option  or  specify  -stage
              detail.

       -xtalk_reduction
              Runs  routing-based  crosstalk  reduction  signal integrity (SI)
              optimization.

              This option is applicable only if you  enable  signal  integrity
              mode  before  running  the  route_opt command. You enable signal
              integrity mode by setting the -route_xtalk_prevention option  of
              the  set_si_options  command to true. By default, this option is
              set to false. If you specify the -xtalk_reduction option without
              enabling signal integrity mode, the tool issues an error message
              and stops. If you specify this  option  and  also  enable  block
              interface optimization, the tool honors the option only for top-
              level nets.

       -only_xtalk_reduction
              Runs only routing-based crosstalk reduction.

              Similar to the -xtalk_reduction option, this option is  applica-
              ble  only  if  you  enable  signal  integrity  mode  running the
              route_opt command. If you specify this option  without  enabling
              signal  integrity  mode or if you specify any other options with
              the -only_xtalk_reduction option, the tool issues an error  mes-
              sage and stops. If you specify this option and also enable block
              interface optimization, the tool will honor the option only  for
              top-level nets.

       -power
              Enables topology-based leakage-power optimization.

              The  route_opt  command  can  perform leakage-power optimization
              based on either the multiple-threshold-voltage constraint or the
              leakage  values  of  the library cells. To perform leakage-power
              optimization based on the multiple-threshold-voltage constraint,
              use  the  set_multi_vth_constraint  command  to define this con-
              straint before running the  route_opt  command.   If  this  con-
              straint  is  not defined, the tool bases the leakage-power opti-
              mization on the leakage values of the library cells.

              When you specify this option for a multicorner-multimode design,
              you  must  use  the  set_scenario_options  command to select the
              leakage scenarios before running the route_opt command.

       -size_only
              Performs only sizing of cells  in  topology-based  optimization.
              You  can  use this option for designs that are very sensitive to
              postroute optimization changes.

              You control  the  sizing  method  by  setting  the  effort.   By
              default, the tool runs medium effort optimization, which enables
              in-place size-only optimization. To use footprint swapping,  set
              the  -effort option to low. To use regular density-based sizing,
              set the -effort option to high.

       -area_recovery
              Enables area recovery for cells that are not on timing  critical
              paths.

       -wire_size
              Enables  the use of an additional technique that sizes the width
              of route segments to fix setup time violations during  topology-
              based optimization.

              This  option  needs existing nondefault routing rules and it can
              change netlist.  The tool applies nondefault  routing  rules  to
              the  touched  nets  and the applied nondefault routing rules are
              not removed after wire sizing.

              If you specify this option and also enable block interface opti-
              mization, the tool honors the option only for top-level nets.

       -effort low | medium | high
              Specifies  the  effort  level for postroute optimizations in the
              route_opt flow. This option does not change  the  routing  steps
              performed by the route_opt command.

              Valid  values  are  low,  medium, and high.  In high effort, the
              tool is more aggressive during optimization and runs three opti-
              mization loops.

              The default effort level is medium.

       -initial_route_only
              Runs  only  the initial routing stage and does not perform opti-
              mization.

              This option cannot  be  used  with  the  -skip_initial_route  or
              -incremental options.

       -skip_initial_route
              Runs  the only topology-based optimization and ECO routing with-
              out running initial routing.

              Note that if signal integrity mode is enabled, this option  runs
              ECO  routing  without  signal  integrity followed by ECO routing
              with  signal  integrity.  This  differs  from  the  -incremental
              option,  which  runs only ECO routing with signal integrity when
              signal integrity mode is enabled.

              Using this option on a design that is not  detail  routed  might
              generate  erroneous  results;  therefore, you should verify that
              the design is fully routed before you use this option.

              This option cannot be used with the -initial_route_only, -incre-
              mental, or -stage options.

       -incremental
              Disables  running  of  the initial routing steps.  The tool runs
              only topology-based incremental optimization and ECO routing.

              Note that if signal integrity mode is enabled, this option  runs
              only  ECO routing with signal integrity and does not run the ECO
              routing  step  without  signal  integrity,  as  the   -skip_ini-
              tial_route option does.

              This   option  cannot  be  used  with  the  -initial_route_only,
              -skip_initial_route, or -stage options.

       -only_wire_size
              Performs only sizing of wires  during  topology-based  optimiza-
              tion.   The tool applies nondefault routing rules to the touched
              nets and the applied nondefault routing rules  are  not  removed
              after  wire  sizing.  If you specify this option and also enable
              block interface optimization, the tool honors  the  option  only
              for top-level nets.

       -only_hold_time
              Specifies that only hold time violations are fixed.

              This option is applicable only if you enabled hold fixing before
              running the route_opt command. You enable hold fixing  by  using
              the set_fix_hold command.

              This option can be used only with the -incremental option.

       -only_design_rule
              Specifies that only design rule fixing is performed.

              This option can be used only with the -incremental option.

       -only_power_recovery
              Specifies that only leakage power optimizations are performed.

              This option can be used only with the -incremental option.

       -only_area_recovery
              Specifies that only area optimizations are performed.

              This option can be used only with the -incremental option.

       -register_to_register
              Specifies  that  only  register-to-register optimization is per-
              formed.

              This option must be used with the -incremental option. The  only
              other  options  that  you  can  specify  with  this  option  are
              -size_only, -only_hold_time, or -only_design_rule.

       -concurrent_clock_and_data
              Optimizes the clock paths along with the data  paths.  The  data
              paths are optimized to fix setup and hold violations, as well as
              logical design rule violations.

              By default, the route_opt command optimizes only data paths.

              When you use this option, you must set  the  options  for  clock
              path      optimization      by     using     the     set_concur-
              rent_clock_and_data_strategy command.

       -only_concurrent_clock_and_data
              Optimizes the clock paths after performing  a  lightweight  data
              path optimization that fixes only setup violations.

              When  you  use  this  option, you must set the options for clock
              path     optimization     by     using      the      set_concur-
              rent_clock_and_data_strategy command.

       -optimize_wire_via
              Runs an extra wire length and via count optimization.

              This  option  is supported only by the classic router and cannot
              be used with Zroute.

              If you specify this option and also enable block interface opti-
              mization, the tool honors the option only for top-level nets.

       -num_cpus count
              Specifies  the  number of CPUs for detail routing and search and
              repair routing.  You can use up to 63 CPUs.

              By default, a single CPU is used.

              This option is applicable only if  you  are  using  the  classic
              router  and  you  set up multiple CPU mode by using the set_dis-
              tributed_route command prior to running the route_opt command.

              This option is supported only by the classic router  and  cannot
              be used with Zroute.

DESCRIPTION
       This  command  performs simultaneous routing and postroute optimization
       on the current design. The output of this command is a postroute  opti-
       mized  design. The route_opt flow runs differently depending on whether
       signal integrity mode is enabled.

       A  default  (medium  effort)  signal-integrity-enabled  route_opt  flow
       includes:

       1.  Initial routing: Global routing, track assignment, and detail rout-
         ing
         If you are using the classic router, it also runs search and  repair.

       2.  Topology-based  optimization  (adaptive) without considering signal
         integrity

       3. Topology-based signal integrity optimization

       A default  (medium  effort)  signal-integrity-disabled  route_opt  flow
       includes:

       1.  Initial routing: Global routing, track assignment, and detail rout-
         ing
         If you are using the classic router, it also runs search and  repair.

       2. Topology-based optimization without considering signal integrity

       You  can  add  routing-based crosstalk reduction to the default flow by
       using the -xtalk_reduction option. If you are using the classic router,
       you  can add wire length and via count optimization to the default flow
       by using the -optimize_wire_via  option.  The  signal-integrity-enabled
       route_opt flow is then changed to:

       1.  Initial routing: Global routing, track assignment, and detail rout-
         ing
         If you are using the classic router, it also runs search and  repair.

       2. Optimization of wire length and via count

       3.  Topology-based  optimization  (adaptive) without considering signal
         integrity

       4. Routing-based crosstalk reduction

       5. Topology-based signal integrity optimization

       To enable verbose reporting during the hold  fixing,  DRC  fixing,  and
       crosstalk  reduction  stages,  set  the routeopt_verbose variable. This
       variable uses bitwise operation to enable various  reporting  capabili-
       ties. For details about setting this variable, see the man page.

   Multicorner-Multimode Support
       This command uses information from all active scenarios.  If you enable
       power optimization, you must select the leakage scenarios  before  run-
       ning the place_opt command.

   Block Interface Optimization Support
       The  route_opt  command  uses  information from the set_top_implementa-
       tion_options command and performs topology-based  optimization  at  the
       top level and block interface.  At the end of route_opt, the blocks are
       updated in memory with the changes. You must run the  save_mw_cel  com-
       mand to save the updated design to disk.

       The  following  options  do  not apply to block interface optimization:
       -xtalk_reduction, -only_xtalk_reduction, -stage global,  -stage  track,
       -optimize_wire_via, -wire_size, and -only_wire_size.

       If  you use these options when block interface optimization is enabled,
       the tool honors these options only for top-level nets.

EXAMPLES
       The following example runs initial routing and  stops  without  running
       optimization:

         prompt> route_opt -initial_route_only

       The following example performs only global routing:

         prompt> route_opt -initial_route_only -stage global

       The  following  example  performs only global routing and track assign-
       ment:

         prompt> route_opt -initial_route_only -stage track

       The following example runs only detail routing (if you  are  using  the
       classic router, it also runs search and repair):

         prompt> route_opt -initial_route_only -stage detail

       The  following  example  runs  only  optimization and skips the initial
       routing steps:

         prompt> route_opt -skip_initial_route

       The following example runs only incremental optimization:

         prompt> route_opt -incremental

       The following example runs routing-based crosstalk reduction  in  addi-
       tion to the default route_opt signal integrity flow:

         prompt> route_opt -xtalk_reduction

       The  following  example enables block interface optimization, runs only
       optimization and skips the initial routing steps:

         prompt> set_host_options -pool LSF -name "LSF_hosts"
         prompt> set_top_implementation_options \
            -optimize_block_interface true -host_options "LSF_hosts"
         prompt> route_opt -skip_initial_route

       The following example enables block interface  optimization,  and  runs
       only incremental optimization:

         prompt> set_host_options -pool LSF -name "LSF_hosts"
         prompt> set_top_implementation_options \
            -optimize_block_interface true -host_options "LSF_hosts"
         prompt> route_opt -incremental

SEE ALSO
       clock_opt(2)
       extract_rc(2)
       place_opt(2)
       set_route_opt_strategy(2)
       set_top_implementation_options(2)
       set_multi_vth_constraint(2)
       set_scenario_options(2)
       routeopt_verbose(3)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> 

Thank you...
